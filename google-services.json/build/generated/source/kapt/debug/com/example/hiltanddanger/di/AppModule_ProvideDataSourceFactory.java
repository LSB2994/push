// Generated by Dagger (https://dagger.dev).
package com.example.hiltanddanger.di;

import com.example.hiltanddanger.remote.ArticleService;
import com.example.hiltanddanger.remote.datasource.DataSource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class AppModule_ProvideDataSourceFactory implements Factory<DataSource> {
  private final AppModule module;

  private final Provider<ArticleService> articleServiceProvider;

  public AppModule_ProvideDataSourceFactory(AppModule module,
      Provider<ArticleService> articleServiceProvider) {
    this.module = module;
    this.articleServiceProvider = articleServiceProvider;
  }

  @Override
  public DataSource get() {
    return provideDataSource(module, articleServiceProvider.get());
  }

  public static AppModule_ProvideDataSourceFactory create(AppModule module,
      Provider<ArticleService> articleServiceProvider) {
    return new AppModule_ProvideDataSourceFactory(module, articleServiceProvider);
  }

  public static DataSource provideDataSource(AppModule instance, ArticleService articleService) {
    return Preconditions.checkNotNullFromProvides(instance.provideDataSource(articleService));
  }
}
